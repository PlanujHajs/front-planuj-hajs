/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeletedModelOut,
  HTTPValidationError,
  IncomeCreate,
  IncomeModel,
  IncomeOut,
  ListIncomesIncomesGetParams
} from '.././types';

import { axiosCustom } from '.././mutator/axiosCustom';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Update One IncomeModel by {id} in the collection
 * @summary Update One IncomeModel by {id} in the collection
 */
export const routeIncomesIdPatch = (
    id: string,
    incomeModel: IncomeModel,
 options?: SecondParameter<typeof axiosCustom>,) => {
      
      
      return axiosCustom<IncomeOut>(
      {url: `/incomes/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: incomeModel
    },
      options);
    }
  


export const getRouteIncomesIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPatch>>, TError,{id: string;data: IncomeModel}, TContext>, request?: SecondParameter<typeof axiosCustom>}
): UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPatch>>, TError,{id: string;data: IncomeModel}, TContext> => {

const mutationKey = ['routeIncomesIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof routeIncomesIdPatch>>, {id: string;data: IncomeModel}> = (props) => {
          const {id,data} = props ?? {};

          return  routeIncomesIdPatch(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RouteIncomesIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof routeIncomesIdPatch>>>
    export type RouteIncomesIdPatchMutationBody = IncomeModel
    export type RouteIncomesIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update One IncomeModel by {id} in the collection
 */
export const useRouteIncomesIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPatch>>, TError,{id: string;data: IncomeModel}, TContext>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof routeIncomesIdPatch>>,
        TError,
        {id: string;data: IncomeModel},
        TContext
      > => {

      const mutationOptions = getRouteIncomesIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Replace One IncomeModel by {id} in the collection
 * @summary Replace One IncomeModel by {id} in the collection
 */
export const routeIncomesIdPut = (
    id: string,
    incomeModel: IncomeModel,
 options?: SecondParameter<typeof axiosCustom>,) => {
      
      
      return axiosCustom<IncomeOut>(
      {url: `/incomes/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: incomeModel
    },
      options);
    }
  


export const getRouteIncomesIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPut>>, TError,{id: string;data: IncomeModel}, TContext>, request?: SecondParameter<typeof axiosCustom>}
): UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPut>>, TError,{id: string;data: IncomeModel}, TContext> => {

const mutationKey = ['routeIncomesIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof routeIncomesIdPut>>, {id: string;data: IncomeModel}> = (props) => {
          const {id,data} = props ?? {};

          return  routeIncomesIdPut(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RouteIncomesIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof routeIncomesIdPut>>>
    export type RouteIncomesIdPutMutationBody = IncomeModel
    export type RouteIncomesIdPutMutationError = HTTPValidationError

    /**
 * @summary Replace One IncomeModel by {id} in the collection
 */
export const useRouteIncomesIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdPut>>, TError,{id: string;data: IncomeModel}, TContext>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof routeIncomesIdPut>>,
        TError,
        {id: string;data: IncomeModel},
        TContext
      > => {

      const mutationOptions = getRouteIncomesIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete One IncomeModel by {id} from the collection
 * @summary Delete One IncomeModel by {id} from the collection
 */
export const routeIncomesIdDelete = (
    id: string,
 options?: SecondParameter<typeof axiosCustom>,) => {
      
      
      return axiosCustom<DeletedModelOut>(
      {url: `/incomes/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRouteIncomesIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosCustom>}
): UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdDelete>>, TError,{id: string}, TContext> => {

const mutationKey = ['routeIncomesIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof routeIncomesIdDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  routeIncomesIdDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RouteIncomesIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof routeIncomesIdDelete>>>
    
    export type RouteIncomesIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete One IncomeModel by {id} from the collection
 */
export const useRouteIncomesIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof routeIncomesIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof routeIncomesIdDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRouteIncomesIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create Income
 */
export const createIncomeIncomesPost = (
    incomeCreate: IncomeCreate,
 options?: SecondParameter<typeof axiosCustom>,signal?: AbortSignal
) => {
      
      
      return axiosCustom<IncomeOut>(
      {url: `/incomes/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: incomeCreate, signal
    },
      options);
    }
  


export const getCreateIncomeIncomesPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIncomeIncomesPost>>, TError,{data: IncomeCreate}, TContext>, request?: SecondParameter<typeof axiosCustom>}
): UseMutationOptions<Awaited<ReturnType<typeof createIncomeIncomesPost>>, TError,{data: IncomeCreate}, TContext> => {

const mutationKey = ['createIncomeIncomesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createIncomeIncomesPost>>, {data: IncomeCreate}> = (props) => {
          const {data} = props ?? {};

          return  createIncomeIncomesPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateIncomeIncomesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createIncomeIncomesPost>>>
    export type CreateIncomeIncomesPostMutationBody = IncomeCreate
    export type CreateIncomeIncomesPostMutationError = HTTPValidationError

    /**
 * @summary Create Income
 */
export const useCreateIncomeIncomesPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createIncomeIncomesPost>>, TError,{data: IncomeCreate}, TContext>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createIncomeIncomesPost>>,
        TError,
        {data: IncomeCreate},
        TContext
      > => {

      const mutationOptions = getCreateIncomeIncomesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List Incomes
 */
export const listIncomesIncomesGet = (
    params?: ListIncomesIncomesGetParams,
 options?: SecondParameter<typeof axiosCustom>,signal?: AbortSignal
) => {
      
      
      return axiosCustom<IncomeOut[]>(
      {url: `/incomes/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListIncomesIncomesGetQueryKey = (params?: ListIncomesIncomesGetParams,) => {
    return [`/incomes/`, ...(params ? [params]: [])] as const;
    }

    
export const getListIncomesIncomesGetQueryOptions = <TData = Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError = HTTPValidationError>(params?: ListIncomesIncomesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListIncomesIncomesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listIncomesIncomesGet>>> = ({ signal }) => listIncomesIncomesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListIncomesIncomesGetQueryResult = NonNullable<Awaited<ReturnType<typeof listIncomesIncomesGet>>>
export type ListIncomesIncomesGetQueryError = HTTPValidationError


export function useListIncomesIncomesGet<TData = Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError = HTTPValidationError>(
 params: undefined |  ListIncomesIncomesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIncomesIncomesGet>>,
          TError,
          Awaited<ReturnType<typeof listIncomesIncomesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListIncomesIncomesGet<TData = Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError = HTTPValidationError>(
 params?: ListIncomesIncomesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIncomesIncomesGet>>,
          TError,
          Awaited<ReturnType<typeof listIncomesIncomesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListIncomesIncomesGet<TData = Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError = HTTPValidationError>(
 params?: ListIncomesIncomesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Incomes
 */

export function useListIncomesIncomesGet<TData = Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError = HTTPValidationError>(
 params?: ListIncomesIncomesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listIncomesIncomesGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListIncomesIncomesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Income
 */
export const getIncomeIncomesIncomeIdGet = (
    incomeId: string,
 options?: SecondParameter<typeof axiosCustom>,signal?: AbortSignal
) => {
      
      
      return axiosCustom<IncomeOut>(
      {url: `/incomes/${incomeId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetIncomeIncomesIncomeIdGetQueryKey = (incomeId: string,) => {
    return [`/incomes/${incomeId}`] as const;
    }

    
export const getGetIncomeIncomesIncomeIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError = HTTPValidationError>(incomeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIncomeIncomesIncomeIdGetQueryKey(incomeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>> = ({ signal }) => getIncomeIncomesIncomeIdGet(incomeId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(incomeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIncomeIncomesIncomeIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>>
export type GetIncomeIncomesIncomeIdGetQueryError = HTTPValidationError


export function useGetIncomeIncomesIncomeIdGet<TData = Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError = HTTPValidationError>(
 incomeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>,
          TError,
          Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIncomeIncomesIncomeIdGet<TData = Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError = HTTPValidationError>(
 incomeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>,
          TError,
          Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetIncomeIncomesIncomeIdGet<TData = Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError = HTTPValidationError>(
 incomeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Income
 */

export function useGetIncomeIncomesIncomeIdGet<TData = Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError = HTTPValidationError>(
 incomeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getIncomeIncomesIncomeIdGet>>, TError, TData>>, request?: SecondParameter<typeof axiosCustom>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIncomeIncomesIncomeIdGetQueryOptions(incomeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



